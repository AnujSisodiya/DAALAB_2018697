#include <iostream>
#include <vector>
#include <algorithm>
struct Activity {
    int index;
    int start_time;
    int finish_time;
};

bool compareActivities(const Activity& a, const Activity& b) {
    return a.finish_time < b.finish_time;
}

std::pair<int, std::vector<int>> selectActivities(int N, const std::vector<int>& start_times, const std::vector<int>& finish_times) {
    std::vector<Activity> activities;
    for (int i = 0; i < N; i++) {
        activities.push_back({ i, start_times[i], finish_times[i] });
    }

    std::sort(activities.begin(), activities.end(), compareActivities);

    std::vector<int> selected_activities;
    int last_finish_time = activities[0].finish_time;
    selected_activities.push_back(activities[0].index);

    for (int i = 1; i < N; i++) {
        if (activities[i].start_time >= last_finish_time) {
            selected_activities.push_back(activities[i].index);
            last_finish_time = activities[i].finish_time;
        }
    }

    return { selected_activities.size(), selected_activities };
}

int main() {
    int N;
    std::cin >> N;

    std::vector<int> start_times(N);
    std::vector<int> finish_times(N);

    for (int i = 0; i < N; i++) {
        std::cin >> start_times[i];
    }

    for (int i = 0; i < N; i++) {
        std::cin >> finish_times[i];
    }

    std::pair<int, std::vector<int>> result = selectActivities(N, start_times, finish_times);

    std::cout << result.first << std::endl;
    for (int i = 0; i < result.second.size(); i++) {
        std::cout << result.second[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
